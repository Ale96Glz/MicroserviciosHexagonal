services:
  redpanda:
    image: redpandadata/redpanda:latest
    container_name: redpanda
    ports:
      - "9092:9092"   # Kafka API
      - "9644:9644"   # Admin API
      - "8082:8082"   # REST API
    command:
      - redpanda
      - start
      - --smp 1
      - --memory 1G
      - --reserve-memory 0M
      - --overprovisioned
      - --node-id 0
      - --check=false
      - --kafka-addr PLAINTEXT://0.0.0.0:29092,OUTSIDE://0.0.0.0:9092
      - --advertise-kafka-addr PLAINTEXT://redpanda:29092,OUTSIDE://localhost:9092
      - --pandaproxy-addr 0.0.0.0:8082
      - --advertise-pandaproxy-addr localhost:8082
      - --rpc-addr 0.0.0.0:33145
      - --advertise-rpc-addr redpanda:33145
    healthcheck:
      test: ["CMD-SHELL", "rpk cluster health --api-urls=localhost:9644"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - microservices-network

  redpanda-console:
    image: redpandadata/console:latest
    container_name: redpanda-console
    ports:
      - "8081:8080"   # Redpanda Console Web UI
    environment:
      - KAFKA_BROKERS=redpanda:29092
    depends_on:
      redpanda:
        condition: service_healthy
    networks:
      - microservices-network

  orders-service:
    image: ghcr.io/ale96glz/microservicioshexagonal/orders-service:main
    container_name: orders-service
    ports:
      - "8084:8084"
    environment:
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=redpanda:29092
      - SERVER_PORT=8084
      - SPRING_PROFILES_ACTIVE=docker
      - KAFKA_TOPIC_PREFIX=hexagonal-orders
      - KAFKA_TOPIC_ENVIRONMENT=dev
      - KAFKA_ENABLED=true
    depends_on:
      redpanda:
        condition: service_healthy
    networks:
      - microservices-network
    restart: unless-stopped

  delivery-service:
    image: ghcr.io/ale96glz/microservicioshexagonal/delivery-service:main
    container_name: delivery-service
    ports:
      - "8083:8083"
    environment:
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=redpanda:29092
      - SERVER_PORT=8083
      - SPRING_PROFILES_ACTIVE=docker
      - KAFKA_CONSUMER_GROUP_ID=delivery-service-group
      - KAFKA_CONSUMER_AUTO_OFFSET_RESET=earliest
      - KAFKA_TOPIC_ORDER_CONFIRMED=hexagonal-orders-dev-order-confirmed
      - KAFKA_TOPIC_ORDER_CREATED=hexagonal-orders-dev-order-created
    depends_on:
      redpanda:
        condition: service_healthy
      orders-service:
        condition: service_started
    networks:
      - microservices-network
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./prometheus/alerts.yml:/etc/prometheus/alerts.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    depends_on:
      - orders-service
      - delivery-service
    networks:
      - microservices-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus
    networks:
      - microservices-network
    restart: unless-stopped

networks:
  microservices-network:
    driver: bridge

volumes:
  prometheus_data:
  grafana_data:
